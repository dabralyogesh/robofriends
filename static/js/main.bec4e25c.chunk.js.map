{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/Cardlist.js","Components/Searchbox.js","Components/Scroll.js","Containers/ErrorBoundry.js","Containers/App.js","index.js","robot.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","cardlist","robots","map","robot","i","key","username","Searchbox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","Cardlist","React","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.bec4e25c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card =({id, name, email}) => {\r\n return(\r\n \t<div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\r\n \t\t<img alt=\"card_name\" src={`https://robohash.org/${id}?size=200x200`}/>\r\n       \t<div >\r\n       \t\t<h2>{name}</h2>\r\n       \t\t<p>{email}</p>\r\n       \t</div>\r\n \t</div>  \r\n );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js'\r\n\r\nconst cardlist = ({robots}) =>{\r\n\treturn(\r\n        \trobots.map((robot, i) => {\r\n\t\t\t\treturn (\t\t\r\n\t\t\t\t\t <Card key = {i}\r\n\t\t\t\t\t id={robots[i].id}\r\n\t\t\t\t \t name={robots[i].name}\r\n\t\t\t\t \t email={robots[i].username} />\r\n\t\t\t\t \t \r\n\t\t\t\t \t );\r\n\t\t\t\t\r\n })\r\n\t);\r\n}\r\n\r\nexport default cardlist;","import React from 'react';\r\n\r\n\r\nconst Searchbox = ({searchChange}) => {\r\n\treturn(\r\n\t  <div className=\"pa2\"> \r\n\t\t<input \r\n\t\t className=\"pa3 ba b--green bg-lightest-blue\"\r\n\t\t type='search'\r\n\t\t placeholder='search robots'\r\n\t\t onChange={searchChange}\r\n\t\t />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll =(props) =>{\r\n    return(\r\n\t         <div style={{overflowY:'scroll', border: '1px solid black', height:'500px'}}>\r\n\t           {props.children}\r\n\t         </div>\r\n\t      )\r\n}\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state ={\r\n\t\t\thasError:false\r\n\t\t}\r\n\t}\r\n\r\ncomponentDidCatch(error){\r\n  this.setState({hasError:true})\r\n}\r\nrender(){\r\n if(this.state.hasError){\r\n   return <h1> OOPS. Something went wrong </h1>;\r\n }\r\n  return(\r\n  \tthis.props.children)\r\n}\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport Cardlist from '../Components/Cardlist';\r\nimport Searchbox from '../Components/Searchbox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundry from './ErrorBoundry';\r\n\r\nclass App extends React.Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state={\r\n\t\t  robots: [],\r\n\t\t  searchfield:''\r\n\t\t}\r\n\t}\r\n\r\n    componentDidMount(){\r\n    \tfetch('https://jsonplaceholder.typicode.com/users')\r\n    \t.then(response => response.json())\r\n    \t.then(users =>this.setState({robots:users}))\r\n    }\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t  \r\n\t}\r\n\t  render() {\r\n\t\t   const filteredRobots = this.state.robots.filter(robot => {\r\n\t\t  \treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t  })\r\n\r\n\t\t  if(this.state.robots.length === 0)\r\n\t\t  {\r\n\t\t  \treturn <h1>Loading</h1>\r\n\t\t  }\r\n\t\t  else{\r\n\t\t  return(\r\n\t\t  \t<div className=\"tc\">\r\n\t\t  \t\t<h1>RoboFriends</h1>\r\n\t\t  \t\t<Searchbox searchChange={this.onSearchChange}/>\r\n\t\t  \t\t<Scroll>\r\n\t\t  \t\t\t<ErrorBoundry>\r\n\t\t    \t\t\t<Cardlist robots= {filteredRobots}/>\r\n\t\t    \t    </ErrorBoundry>\r\n\t\t    \t</Scroll>\r\n\t\t    </div>\r\n\t\t    );\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {robots} from './robot.js'\nimport App from './Containers/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App robots={robots}/>\n  </React.StrictMode>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Leanne Graham',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Ervin Howell',\r\n    username: 'Antonette',\r\n    email: 'Shanna@melissa.tv'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Clementine Bauch',\r\n    username: 'Samantha',\r\n    email: 'Nathan@yesenia.net'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Patricia Lebsack',\r\n    username: 'Karianne',\r\n    email: 'Julianne.OConner@kory.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Chelsey Dietrich',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  }\r\n];\r\n"],"sourceRoot":""}